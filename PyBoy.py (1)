class CPU(object):
	""" The object representation of the Game Boy's
		internal CPU, a custom Zilog Z80.
	"""
	def __init__(self, rom):
		self.game_rom = rom

		self.clocks = {"m":0, "t":0}

		self.registers = {
			"a":0, "b":0, "c":0, "d":0, "e":0, "f":0, "h":0, "l":0,  # 8-bit registers
			"pc":0, "sp":0,                                          # 16-bit registers
			"i":0, "r":0,
			"m":0, "t":0,                                            # Clocks for last instruction
			"ime":0
		}

		self.halt = 0
		self.stop = 0

	def reset(self):
		self.clocks["m"] = 0
		self.clocks["t"] = 0
		self.registers["a"] = 0
		self.registers["b"] = 0
		self.registers["c"] = 0
		self.registers["d"] = 0
		self.registers["e"] = 0
		self.registers["f"] = 0
		self.registers["h"] = 0
		self.registers["l"] = 0
		self.registers["pc"] = 0
		self.registers["sp"] = 0
		self.registers["i"] = 0
		self.registers["r"] = 0
		self.registers["m"] = 0
		self.registers["t"] = 0
		self.registers["ime"] = 1
		self.halt = 0
		self.stop = 0

	def NOP(self):
		self.registers["m"] = 1                       # 1 M-time taken
		self.registers["t"] = 4

	def LD(self, par1, par2):
		self.registers[par1] = self.registers[par2]   # load value
		self.NOP()                                    # 1 M-time taken

	def ADD(self, par1, par2):
		self.registers[par1] += self.registers[par2]  # perform addition
		self.registers["f"] = 0                       # clear flags

		if not (self.registers[par1] & 255):          # check for zero
			self.registers["f"] |= 0x80

		if self.registers[par1] > 255:                # check for carry
			self.registers["f"] |= 0x10

		self.registers[par1] &= 255                   # mask to 8 bits
		self.NOP()                                    # 1 M-time taken

	def CMP(self, par1, par2):
		tmp = self.registers[par1]                    # create a temporary copy
		tmp -= self.registers[par2]                   # perform subtraction
		self.registers["f"] |= 0x40                   # set subtraction flag

		if not (tmp & 255):                           # check for zero
			self.registers["f"] |= 0x80
		if tmp < 0:                                   # check for underflow
			self.registers["f"] |= 0x10

		self.NOP()                                    # 1 M-time taken


class MMU(object):
	""" The object representation of the Game Boy's
		memory management unit. Bytes are 8 bits,
		words are 2 bytes (16 bits).
	"""
	def __init__(self):
		pass

	def read_byte(self, address):
		pass

	def read_word(self, address):
		pass

	def write_byte(self, address, value):
		pass

	def write_word(self, address, value):
		pass
        
""" Credits to:
	http://imrannazar.com/GameBoy-Emulation-in-JavaScript - for a great overview of how gameboys work internally
	http://gbdev.gg8.se/wiki/articles/The_Cartridge_Header - for the ROM header structure
	myself - for actually making this!
"""
from sys import argv


def main(argv):
	if len(argv) < 2:
		print("Error: please provide a path to the ROM.")
	else:
		game_rom = ROM(argv[1])
		game_cpu = CPU(game_rom)
		print("\nROM \""+argv[1]+"\" loaded successfully!\n")
		print("Internal game name:  "+game_rom.name)
		print("Cartridge type:      "+game_rom.cartridge_type)
		print("ROM size:            "+game_rom.rom_size)
		print("RAM size:            "+game_rom.ram_size)
		print("Made only for Japan: "+game_rom.japanese)
		print("")


if __name__ == "__main__":
	main(argv)
    
class ROM(object):
	""" The ROM object representing the
		bytes contained in the loaded game.
	"""
	def __init__(self, filepath):
		self.bytes = []
		with open(filepath, "rb") as rom:
			byte = rom.read(1)
			while byte:
				self.bytes.append(byte.encode("hex").upper())
				byte = rom.read(1)

		self.name = "".join(chr(int(b, 16)) for b in self[int("0x134", 16):int("0x143", 16)])

		self.cartridge_type = {
			0x00:"ROM ONLY",
			0x01:"MBC1",
			0x02:"MBC1+RAM",
			0x03:"MBC1+RAM+BATTERY",
			0x05:"MBC2",
			0x06:"MBC2+BATTERY",
			0x08:"ROM+RAM",
			0x09:"ROM+RAM+BATTERY",
			0x0B:"MMM01",
			0x0C:"MMM01+RAM",
			0x0D:"MMM01+RAM+BATTERY",
			0x0F:"MBC3+TIMER+BATTERY",
			0x10:"MBC3+TIMER+RAM+BATTERY",
			0x11:"MBC3",
			0x12:"MBC3+RAM",
			0x13:"MBC3+RAM+BATTERY",
			0x15:"MBC4",
			0x16:"MBC4+RAM",
			0x17:"MBC4+RAM+BATTERY",
			0x19:"MBC5",
			0x1A:"MBC5+RAM",
			0x1B:"MBC5+RAM+BATTERY",
			0x1C:"MBC5+RUMBLE",
			0x1D:"MBC5+RUMBLE+RAM",
			0x1E:"MBC5+RUMBLE+RAM+BATTERY",
			0xFC:"POCKET CAMERA",
			0xFD:"BANDAI TAMA5",
			0xFE:"HuC3",
			0xFF:"HuC1+RAM+BATTERY"
		}[int(self["0x147"], 16)]

		self.rom_size = {
			0x00:"32 KB (no ROM banking)",
			0x01:"64 KB (4 banks)",
			0x02:"128 KB (8 banks)",
			0x03:"256 KB (16 banks)",
			0x04:"512 KB (32 banks)",
			0x05:"1 MB (64 banks)",
			0x06:"2 MB (128 banks)",
			0x07:"4 MB (256 banks)",
			0x52:"1.1 MB (72 banks)",
			0x53:"1.2 MB (80 banks)",
			0x54:"1.5 MB (96 banks)"
		}[int(self["0x148"], 16)]

		self.ram_size = {
			0x00:"None",
			0x01:"2 KB",
			0x02:"8 KB",
			0x03:"32 KB"
		}[int(self["0x149"], 16)]

		self.japanese = str(not bool(int(self["0x14A"], 16)))

	def __getitem__(self, index):
		if type(index) == type(""):
			return self.bytes[int(index, 16)]
		else:
			return self.bytes[index]
